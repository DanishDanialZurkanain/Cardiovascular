@login_required
@register_breadcrumb(app, '.chart', 'Data Visualization')
@app.route('/data_visualization')
def data_visualization():    
    #Get the data from Postgresql and convert it to Matrics 
    user_dataset = pandas.read_sql(db.session.query(User).statement, db.session.bind)
    health_dataset = pandas.read_sql(db.session.query(Health).statement, db.session.bind)
    dataset = user_dataset.merge(health_dataset, left_on = 'id', right_on = 'user_id')

    X = request.args.get('X_value')
    y = request.args.get('y_value')

    gender = dataset['sex_x'].map({0: 'Female', 1: 'Male'})

    # Bar Plot
    img = BytesIO()

    if X == 'age_x' and y == 'target':
        bar = seaborn.countplot(x = dataset['age_x'], hue = dataset['target'], palette = 'pastel')
        bar.legend_.remove()
        plt.title('Target versus Age')
        plt.xlabel('Age')
        plt.ylabel('Count')
        plt.legend(title = 'Result', loc = 'upper right', labels=['Negative', 'Positive'])
        plt.show(bar)
    elif X == 'sex_x' and y == 'target':
        bar = seaborn.countplot(x = gender, hue = dataset['target'])
        bar.legend_.remove()
        plt.title('Result versus Gender')
        plt.xlabel('Gender')
        plt.ylabel('Count')
        plt.legend(title = 'Result', loc = 'upper right', labels=['Negative', 'Positive'])
    else:
        bar = seaborn.countplot(x = dataset['age_x'], hue = gender)
        bar.legend_.remove()
        plt.title('Gender versus Age')
        plt.xlabel('Age')
        plt.ylabel('Count')
        plt.legend(title = 'Gender', loc = 'upper right', labels=['Male', 'Female'])
        plt.show(bar)

    plt.savefig(img, format='png')
    plt.close()
    img.seek(0)

    plot_url = base64.b64encode(img.getvalue()).decode()

    return render_template('dashboard/chart.html', plot_url = plot_url)